# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_event_manager')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_event_manager')
    _event_manager = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_event_manager', [dirname(__file__)])
        except ImportError:
            import _event_manager
            return _event_manager
        try:
            _mod = imp.load_module('_event_manager', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _event_manager = swig_import_helper()
    del swig_import_helper
else:
    import _event_manager
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

EM_SUCCESS = _event_manager.EM_SUCCESS
EM_OUT_OF_MEMORY = _event_manager.EM_OUT_OF_MEMORY
EM_NULL_ARGUMENT = _event_manager.EM_NULL_ARGUMENT
EM_INVALID_DATE = _event_manager.EM_INVALID_DATE
EM_INVALID_EVENT_ID = _event_manager.EM_INVALID_EVENT_ID
EM_EVENT_ALREADY_EXISTS = _event_manager.EM_EVENT_ALREADY_EXISTS
EM_EVENT_ID_ALREADY_EXISTS = _event_manager.EM_EVENT_ID_ALREADY_EXISTS
EM_EVENT_NOT_EXISTS = _event_manager.EM_EVENT_NOT_EXISTS
EM_EVENT_ID_NOT_EXISTS = _event_manager.EM_EVENT_ID_NOT_EXISTS
EM_INVALID_MEMBER_ID = _event_manager.EM_INVALID_MEMBER_ID
EM_MEMBER_ID_ALREADY_EXISTS = _event_manager.EM_MEMBER_ID_ALREADY_EXISTS
EM_MEMBER_ID_NOT_EXISTS = _event_manager.EM_MEMBER_ID_NOT_EXISTS
EM_EVENT_AND_MEMBER_ALREADY_LINKED = _event_manager.EM_EVENT_AND_MEMBER_ALREADY_LINKED
EM_EVENT_AND_MEMBER_NOT_LINKED = _event_manager.EM_EVENT_AND_MEMBER_NOT_LINKED
EM_ERROR = _event_manager.EM_ERROR

def createEventManager(date):
    return _event_manager.createEventManager(date)
createEventManager = _event_manager.createEventManager

def destroyEventManager(em):
    return _event_manager.destroyEventManager(em)
destroyEventManager = _event_manager.destroyEventManager

def emAddEventByDate(em, event_name, date, event_id):
    return _event_manager.emAddEventByDate(em, event_name, date, event_id)
emAddEventByDate = _event_manager.emAddEventByDate

def emAddEventByDiff(em, eventName, days, event_id):
    return _event_manager.emAddEventByDiff(em, eventName, days, event_id)
emAddEventByDiff = _event_manager.emAddEventByDiff

def emRemoveEvent(em, event_id):
    return _event_manager.emRemoveEvent(em, event_id)
emRemoveEvent = _event_manager.emRemoveEvent

def emChangeEventDate(em, event_id, new_date):
    return _event_manager.emChangeEventDate(em, event_id, new_date)
emChangeEventDate = _event_manager.emChangeEventDate

def emAddMember(em, member_name, member_id):
    return _event_manager.emAddMember(em, member_name, member_id)
emAddMember = _event_manager.emAddMember

def emAddMemberToEvent(em, member_id, event_id):
    return _event_manager.emAddMemberToEvent(em, member_id, event_id)
emAddMemberToEvent = _event_manager.emAddMemberToEvent

def emRemoveMemberFromEvent(em, member_id, event_id):
    return _event_manager.emRemoveMemberFromEvent(em, member_id, event_id)
emRemoveMemberFromEvent = _event_manager.emRemoveMemberFromEvent

def emTick(em, days):
    return _event_manager.emTick(em, days)
emTick = _event_manager.emTick

def emGetEventsAmount(em):
    return _event_manager.emGetEventsAmount(em)
emGetEventsAmount = _event_manager.emGetEventsAmount

def emGetNextEvent(em):
    return _event_manager.emGetNextEvent(em)
emGetNextEvent = _event_manager.emGetNextEvent

def emPrintAllEvents(em, file_name):
    return _event_manager.emPrintAllEvents(em, file_name)
emPrintAllEvents = _event_manager.emPrintAllEvents

def emPrintAllResponsibleMembers(em, file_name):
    return _event_manager.emPrintAllResponsibleMembers(em, file_name)
emPrintAllResponsibleMembers = _event_manager.emPrintAllResponsibleMembers

def dateCreate(day, month, year):
    return _event_manager.dateCreate(day, month, year)
dateCreate = _event_manager.dateCreate

def dateDestroy(date):
    return _event_manager.dateDestroy(date)
dateDestroy = _event_manager.dateDestroy

def dateCopy(date):
    return _event_manager.dateCopy(date)
dateCopy = _event_manager.dateCopy

def dateGet(date, day, month, year):
    return _event_manager.dateGet(date, day, month, year)
dateGet = _event_manager.dateGet

def dateCompare(date1, date2):
    return _event_manager.dateCompare(date1, date2)
dateCompare = _event_manager.dateCompare

def dateTick(date):
    return _event_manager.dateTick(date)
dateTick = _event_manager.dateTick
# This file is compatible with both classic and new-style classes.


